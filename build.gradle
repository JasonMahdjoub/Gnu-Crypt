/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * artifactoryUser guide available at https://docs.gradle.org/4.1/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'signing'

eclipse {
    classpath {
       downloadSources=true
    }
}
Properties props = new Properties()
def propFile = new File(project.getProjectDir().getParentFile(), 'credentials.properties')
def artifactoryUrl="https://artifactory.distri-mind.fr:443/artifactory"
def sonatypeStagingUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
def artifactoryUser=""
def artifactoryPwd=""
def sonatypeUser=""
def sonatypePwd=""

if (propFile.canRead())
{
	props.load(new FileInputStream(propFile))


	if (props!=null && props.containsKey('artifactory_contextUrl'))
		artifactoryUrl=props.get("artifactory_contextUrl")
	if (props!=null && props.containsKey('artifactory_user'))
		artifactoryUser=props.get("artifactory_user")
	if (props!=null && props.containsKey('artifactory_password'))
		artifactoryPwd=props.get("artifactory_password")
	if (props!=null && props.containsKey('sonatype_staging_url'))
		sonatypeStagingUrl=props.get("sonatype_staging_url")
	if (props!=null && props.containsKey('sonatype_user'))
		sonatypeUser=props.get("sonatype_user")
	if (props!=null && props.containsKey('sonatype_password'))
		sonatypePwd=props.get("sonatype_password")
}
repositories {


	maven {
		url "${artifactoryUrl}/gradle-release/"
		if (artifactoryUser!="")
		{
			credentials {
				username "${artifactoryUser}"
				password "${artifactoryPwd}"
			}
		}
	}
}


dependencies {
}


def javaVersion = "8"
sourceCompatibility = javaVersion
targetCompatibility=javaVersion

allprojects {
	group='com.distrimind.gnu'
	if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_9)) {
		compileJava.options.compilerArgs.addAll(['--release', javaVersion] as Collection<? extends String>)
		javadoc.options.addStringOption("html5", "-quiet")
	}

	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xlint:unchecked"
		}
	}

    
}


version = '1.3.0'

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set('sources')
    from sourceSets.main.allSource
    from "../LICENSE"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier.set('javadoc')
	from javadoc.destinationDir
	from "../LICENSE"
}

idea {
	project {
		jdkName = javaVersion
		languageLevel = javaVersion
	}
}



artifacts {
    archives sourcesJar
    //archives javadocJar
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
    from "../LICENSE"

}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom {
				name = 'GNU Crypt recompiled By DistriMind'
				description = 'Encryption tools'
				url = 'https://github.com/JasonMahdjoub/Gnu-Crypt'
				organization {
					name = 'DistriMind'
					url = 'https://github.com/JasonMahdjoub'
				}
				issueManagement {
					system = 'GitHub'
					url = 'https://github.com/JasonMahdjoub/Gnu-Crypt/issues'
				}
				scm {
					connection = 'https://github.com/JasonMahdjoub/Gnu-Crypt'
					developerConnection = connection
					url = connection
				}
				licenses {
					license {
						name = 'GNU General Public License (with a special exception described below)'
						url = 'https://github.com/JasonMahdjoub/Gnu-Crypt/blob/master/LICENSE'
					}
				}

			}
		}
	}
	repositories {
		maven {
			credentials {
				username "${artifactoryUser}"
				password "${artifactoryPwd}"
			}
			url "${artifactoryUrl}/DistriMind-Public"
		}
		maven {
			credentials {
				username "${sonatypeUser}"
				password "${sonatypePwd}"
			}
			url "${sonatypeStagingUrl}"
		}
	}
}
signing {
	useGpgCmd()
	sign configurations.archives
	sign publishing.publications.mavenJava
}

javadoc {
	if(JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}
